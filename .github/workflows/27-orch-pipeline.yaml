name: Deploy Orchestrator

run-name: 'Triggered by ${{ github.actor }} | Org: ${{ inputs.organization }} | Env: ${{ inputs.environment }} | Size: ${{ inputs.size }}'

on:
  workflow_dispatch:
    inputs:
      organization:
        description: 'Select Organization'
        required: true
        default: 'acme-corp'
        type: choice
        options:
          - acme-corp
          - tech-solutions
          - global-enterprises
          - innovation-labs
          - future-systems
      environment:
        description: 'Select Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod
      size:
        description: 'Select Deployment Size'
        required: true
        default: 'm'
        type: choice
        options: ["m", "l", "xl"]

      db_patching:
        description: 'Setting up Oracle DB'
        required: false
        default: false
        type: boolean

      db_testing:
        description: 'Testing DB configuration, connecting'
        required: false
        default: false
        type: boolean

      ap_provision:
        description: 'Provisioning application'
        required: false
        default: false
        type: boolean

      ap_testing:
        description: 'Application tests'
        required: false
        default: false
        type: boolean

      system_testing:
        description: 'System tests'
        required: false
        default: false
        type: boolean

jobs:
  generating-config:
    runs-on: self-hosted
    outputs:
      ip: ${{ steps.generating_config.outputs.ip }}
    container:
      image: artemdefualtregistry.azurecr.io/azure-tools:latest
      credentials:
        username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: "main"
          sparse-checkout: resources/config.json
          sparse-checkout-cone-mode: false

      - name: Generating json config
        id: generating_config
        run: |
          IP_ADDRESS=$(jq -r '.[0].ip_address' resources/config.json)
          echo "ip=$FIRST_IP" >> $GITHUB_OUTPUT

  terraform-deploy:
    uses: ./.github/workflows/reusable_terraform.yaml
    needs: generating-config
    with:
      organization: ${{ inputs.organization }}
      environment: ${{ inputs.environment }}
      size: ${{ inputs.size }}
      custom-info: ${{ needs.generating-config.outputs.ip }}
    secrets: inherit

  ansible-configuration:
    uses: ./.github/workflows/reusable_ansible.yaml
    needs: terraform-deploy
    with:
      organization: ${{ inputs.organization }}
      environment: ${{ inputs.environment }}
      size: ${{ inputs.size }}
    secrets: inherit

  db_patching:
    uses: ./.github/workflows/reusable_db_migration.yaml
    needs: ansible-configuration
    if: ${{ inputs.db_patching == true }}
    with:
      organization: ${{ inputs.organization }}
      environment: ${{ inputs.environment }}
      size: ${{ inputs.size }}
    secrets: inherit

  db_testing:
    uses: ./.github/workflows/reusable_db_migration.yaml
    needs: db_patching
    if: ${{ inputs.db_testing == true }}
    with:
      organization: ${{ inputs.organization }}
      environment: ${{ inputs.environment }}
      size: ${{ inputs.size }}
    secrets: inherit

  app_provision:
    uses: ./.github/workflows/reusable_db_migration.yaml
    needs: db_testing
    if: ${{ inputs.ap_provision == true }}
    with:
      organization: ${{ inputs.organization }}
      environment: ${{ inputs.environment }}
      size: ${{ inputs.size }}
    secrets: inherit

  app_testing:
    uses: ./.github/workflows/reusable_db_migration.yaml
    needs: app_provision
    if: ${{ inputs.ap_testing == true }}
    with:
      organization: ${{ inputs.organization }}
      environment: ${{ inputs.environment }}
      size: ${{ inputs.size }}
    secrets: inherit

  system_testing:
    uses: ./.github/workflows/reusable_db_migration.yaml
    needs: app_provision
    if: ${{ inputs.system_testing == true }}
    with:
      organization: ${{ inputs.organization }}
      environment: ${{ inputs.environment }}
      size: ${{ inputs.size }}
    secrets: inherit